<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-24T10:45:26+09:00</updated><id>http://localhost:4000/</id><title type="html">codename J.</title><subtitle>SW개발에 대한 이야기</subtitle><author><name>mg.song</name></author><entry><title type="html">마크다운 주요 문법 정리</title><link href="http://localhost:4000/frontend/2018/04/markdown-syntax.html" rel="alternate" type="text/html" title="마크다운 주요 문법 정리" /><published>2018-04-23T22:00:00+09:00</published><updated>2018-04-23T22:00:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/markdown-syntax</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/markdown-syntax.html">&lt;h4 id=&quot;마크다운-이미지-중앙정렬-방법&quot;&gt;마크다운 이미지 중앙정렬 방법&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{: refdef: style=&quot;text-align: center;&quot;}
![자바 vs 자바스크립트](/images/what-nodejs1.png)  
_\&amp;lt;Java 와 Node.js 의 비교\&amp;gt;_
{: refdef}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/what-nodejs1.png&quot; alt=&quot;자바 vs 자바스크립트&quot; /&gt;&lt;br /&gt;
&lt;em&gt;&amp;lt;Java 와 Node.js 의 비교&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;링크-새창으로-열기&quot;&gt;링크 새창으로 열기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[네이버](http://naver.com){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://naver.com&quot; target=&quot;_blank&quot;&gt;네이버&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;참조-링크&quot;&gt;참조 링크&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;참조링크는 본문과 한줄 이상 띄어야 합니다&lt;/li&gt;
  &lt;li&gt;참조링크의 위치는 본문 어느 곳이든 위치할 수 있습니다. 보통은 글 마지막에 둡니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;이 글은 [What exactly is Node.js?][1]를 번역한 글입니다.

[1]:https://medium.freecodecamp.org/what-exactly-is-node-js-ae36e97449f5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 글은 &lt;a href=&quot;https://medium.freecodecamp.org/what-exactly-is-node-js-ae36e97449f5&quot;&gt;What exactly is Node.js?&lt;/a&gt;를 번역한 글입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;테이블&quot;&gt;테이블&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| foo | bar |
| --- | --- |
| baz | bim |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;foo&lt;/th&gt;
      &lt;th&gt;bar&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;baz&lt;/td&gt;
      &lt;td&gt;bim&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hashbox.github.io/마크다운-이미지-중앙정렬&quot; target=&quot;_blank&quot;&gt;https://hashbox.github.io/마크다운-이미지-중앙정렬&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.inswave.com/2018/02/13/setup&quot; target=&quot;_blank&quot;&gt;http://tech.inswave.com/2018/02/13/setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>mg.song</name></author><summary type="html">마크다운 이미지 중앙정렬 방법</summary></entry><entry><title type="html">Node.js 란 도대체 무엇입니까?</title><link href="http://localhost:4000/frontend/2018/04/what-nodejs.html" rel="alternate" type="text/html" title="Node.js 란 도대체 무엇입니까?" /><published>2018-04-23T14:00:00+09:00</published><updated>2018-04-23T14:00:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/what-nodejs</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/what-nodejs.html">&lt;p&gt;Node.js는 자바스크립트 실행 환경입니다. 멋진 말입니다. 그런데 그것이 의미하는 바는 무엇이며 어떻게 동작이 된다는 말일까요?&lt;/p&gt;

&lt;p&gt;Node.js는 자바스크립트를 이용해 프로그램을 작성하기 위해 필요한 모든 것을 가지고 있습니다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/what-nodejs1.png&quot; alt=&quot;자바 vs 자바스크립트&quot; /&gt;&lt;br /&gt;
&lt;em&gt;&amp;lt;Java 와 Node.js 의 비교&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Node.js 는 자바스크립트를 웹브라우져 뿐만 아니라 독립적인 애플리케이션을 만들 때에도 사용하기 위한 목적으로 태어났습니다.
이제 당신은 자바스크립트를 웹사이트의 동적인 사용자 경험을 만드는 것 이상으로 훨씬 더 많은 일들을 할 수 있게 되었습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 이제 파이썬 같은 스크립트언어들이 하던 일을 동일하게 처리할 수 있는 능력이 생겼습니다&lt;/p&gt;

&lt;p&gt;웹브라우져에서 동작하는 자바스크립트와 &lt;em&gt;Node.js&lt;/em&gt; 모두 V8엔진 위에서 동작합니다. V8엔진은 자바스크립트 코드를 기계어로 변환해 줍니다. 기계어는 더 이상 번역이 필요없이 컴퓨터가 바로 실행할 수 있는 저수준의 실행 코드입니다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;왜-nodejs-를-사용해야-합니까&quot;&gt;왜 Node.js 를 사용해야 합니까?&lt;/h3&gt;
&lt;p&gt;Node.js 공식사이트에서는 Node.js를 아래와 같이 정의하고 있습니다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Node.js 는 크롬의 V8엔진을 이용한 실행환경이다.&lt;/li&gt;
    &lt;li&gt;Node.js 는 event-driven, non-blocking I/O 를 사용하여 가볍고 효율적이다.&lt;/li&gt;
    &lt;li&gt;Node.js 의 패키지 관리 시스템인 npm은 전세계에서 가장 큰 오픈소스 라이브러리 생태계를 이루고 있다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 앞서 이미 첫번째 사항에 대하여 살펴 보았습니다.
이제 우리는 Node.js의 나머지 2가지 내용에 대하여 알아볼 것입니다. 이를 통해 우리는 Node.js 가 유명해진 이유를 알게 될 것 입니다.&lt;/p&gt;

&lt;p&gt;I/O는 입력과 출력을 의미합니다. 그것은 네트워크나 파일시스템을 통해 데이터를 읽고 쓰는 행위를 말합니다.&lt;/p&gt;

&lt;p&gt;보통 I/O 처리는 시간을 많이 잡아먹기 때문에 I/O가 처리될 때까지 다른 함수들은 오래도록 실행을 대기해야 합니다&lt;/p&gt;

&lt;p&gt;아래와 같은 상황을 예로 Blocking I/O 와 Non-Blocking I/O를 비교해 봅시다.&lt;br /&gt;
user1과 user2의 상세 정보를 서버에 요청하고 그 결과를 받아서 화면에 출력하고자 합니다. 서버에서 해당 요청에 대한 처리는 시간이 좀 걸립니다 하지만 2가지 요청이 동시에 서버로 날라간다고 가정해 봅시다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/what-nodejs2.png&quot; alt=&quot;Blocking vs Non-Blocking&quot; /&gt;
&lt;em&gt;&amp;lt;Blocking i/O vs Non-Blocking I/O&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;blocking-io&quot;&gt;Blocking I/O&lt;/h3&gt;
&lt;p&gt;Blocking I/O 의 경우 user1의 요청에 대한 응답이 끝날 때 까지 user2 요청 처리에 대한 어떤 작업도 진행할 수 없습니다.&lt;/p&gt;

&lt;p&gt;그래서 웹서버는 새로운 요청을 처리하기 위해 새로운 thread를 시작할 수 밖에 없습니다. 그러나 자바스크립트는 단일 쓰레드로 동작합니다(정확히 표현하자면 이벤트루프가 단일쓰레드로 동작합니다. 자세한 것은 나중에 다시 다루도록 하겠습니다). 이렇게 멀티쓰레드로 처리 해야하는 상황이라면 자바스크립트는 적절한 선택이 될 수 없습니다.&lt;/p&gt;

&lt;p&gt;이제 Non-Blocking I/O 에 대하여 이야기를 할 때가 된 것 같습니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-blocking-io&quot;&gt;Non-blocking I/O&lt;/h3&gt;
&lt;p&gt;앞선 경우와 다르게 자바스크립트는 Non-blocking 으로 위 상황을 처리할 수 있습니다. 당신은 user1의 요청에 대한 처리가 끝나기를 기다릴 필요 없이 user2의 요청을 준비하고 실행할 수 있습니다. 당신은 user1, user2의 요청을 동시에 처리할 수 있는 것입니다&lt;/p&gt;

&lt;p&gt;Non-Blocking I/O 가 가능하다면 멀티쓰레드를 사용하지 않고도 서버는 여러개의 요청을 동시에 처리하는 것이 가능합니다&lt;/p&gt;

&lt;h3 id=&quot;the-javascript-event-loop&quot;&gt;The JavaScript event loop&lt;/h3&gt;
&lt;p&gt;당신에게 지금 26분의 여유가 있다면 아래 이벤트루프에 대한 영상을 보기를 권합니다&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
위 영상을 볼 수 없다면 이벤트루프의 단계별 동작에 대해서 간단히 설명을 드리겠습니다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/what-nodejs3.png&quot; alt=&quot;이벤트루프&quot; /&gt;
&lt;em&gt;&amp;lt;자바스크립트 이벤트루프&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; 함수를 &lt;em&gt;Call Stack&lt;/em&gt; 에 추가합니다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; 를 &lt;em&gt;Call Stack&lt;/em&gt; 에 추가합니다. 이것은 바로 실행되고 &lt;em&gt;Call Stack&lt;/em&gt;  에서 사라집니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(2000)&lt;/code&gt; 을 스택에 추가합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(2000)&lt;/code&gt; 는 Node API이다. 해당 함수를 호출할 때 이벤트 콜백함수를 &lt;em&gt;Callback Queue&lt;/em&gt; 에 등록합니다. 2초 초동안 기다린 후 콜백함수를 호출합니다&lt;/li&gt;
  &lt;li&gt;API목록에 등록이 되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(2000)&lt;/code&gt; 은 &lt;em&gt;Call Stack&lt;/em&gt; 에서 사라집니다&lt;/li&gt;
  &lt;li&gt;이제 같은 방식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(0)&lt;/code&gt;가 APIs에 등록됩니다. 이제 우리는 실행 대기중인 2개의 Node API를 가지고 있습니다.&lt;/li&gt;
  &lt;li&gt;0초 후에, &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(0)&lt;/code&gt;가 &lt;em&gt;Call Stack&lt;/em&gt; 으로 이동됩니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout(2000)&lt;/code&gt; 도 동일한 방식으로 처리가 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Callback Queue&lt;/em&gt; 에서는 &lt;em&gt;Call Stack&lt;/em&gt; 의 함수들이 모두 처리되기를 기다립니다. 단일쓰레드 환경에서는 한번에 하나의 명령만 실행되기 때문에 이 부분을 주의 깊게 보아야 합니다.&lt;/li&gt;
  &lt;li&gt;마지막 &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; 가 실행되면, &lt;em&gt;Call Stack&lt;/em&gt; 에서 main() 가 꺼내집니다&lt;/li&gt;
  &lt;li&gt;이벤트루프는 &lt;em&gt;Call Stack&lt;/em&gt; 의 empty 여부를 모니터링 하다가 &lt;em&gt;Call Stack&lt;/em&gt; 이 empty 상태가 되면 &lt;em&gt;Callback Queue&lt;/em&gt; 에서 콜백함수를 &lt;em&gt;Call Stack&lt;/em&gt; 으로 이동시킵니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;npm&quot;&gt;npm&lt;/h3&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/what-nodejs4.png&quot; alt=&quot;npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;npm은 일반적인 문제들을 해결할 수 있는 다양한 라이브러리들을 가지고 있습니다. 당신은 애플리케이션을 보다 빠르고 효율적으로 만들기 위헤 이 npm 패키지들을 이용할 수 있습니다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;require&quot;&gt;Require&lt;/h3&gt;
&lt;p&gt;Require 는 3가지 일을 합니다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Node.js&lt;/em&gt; 패키지 모듈을 로드합니다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Express&lt;/em&gt; 나 &lt;em&gt;Mongoose&lt;/em&gt; 같은 외부 라이브러리들을 불러오거나 npm을 이용해 설치할 수 있습니다&lt;/li&gt;
  &lt;li&gt;당신이 작성한 모듈을 직접 불러오거나 프로젝트를 모듈화 할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Require&lt;/em&gt; 는 &lt;em&gt;“path”&lt;/em&gt; 를 인자로 받아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; 를 리턴합니다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;node-modules&quot;&gt;Node Modules&lt;/h3&gt;
&lt;p&gt;Node의 모듈은 다른 코드들에 영향을 미치지 않는 재사용 가능한 코드블록 입니다&lt;/p&gt;

&lt;p&gt;당신은 자신만의 모듈을 작성할 수 있고 다양한 애플리케이션에서 그것을 사용할 수 있습니다. Node.js 는 특별한 설치없이 바로 사용가능한 모듈들을 포함하고 있습니다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;v8-turbo-charges-javascript-by-leveraging-c&quot;&gt;V8 turbo-charges JavaScript by leveraging C++&lt;/h3&gt;
&lt;p&gt;V8은 C++로 씌어진 자바스크립트의 오픈소스 실행환경입니다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript -&amp;gt; V8(C++) -&amp;gt; Machine Code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;V8은 ECMA-262의 명세인 ECMAScript 를 구현하였습니다. ECMAScript는 자바스크립트 표준화 단체인 Ecma International에 의해 탄생하였습니다.&lt;/p&gt;

&lt;p&gt;V8은 단독으로 실행되거나 C++ 애플리케이션에 포함될 수 있습니다. 또한 자바스크립트를 사용할 수 있는 당신만의 C++코드를 작성할 수 있도록 허용합니다.&lt;/p&gt;

&lt;p&gt;이것은 V8을 이용해 당신이 ECMAScript 표준 스펙 이외의 원하는 자바스크립트 기능을 자신만의 C++을 이용해 직접 추가할 수 있음을 의미합니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;p&gt;애플리케이션 안에서 발생하는 사건들 중 우리가 직접 핸들링이 가능한 것을 이벤트라고 한다. Node 에는 2가지 종류의 이벤트가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System Events: libuv 라고 불리는 C++코어에서 발생하는 이벤트(예를 들면, 파일을 읽기가 끝났을 때).&lt;/li&gt;
  &lt;li&gt;Custom Events: 자바스크립트 코어에서 발생하는 이벤트
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;writing-hello-world-in-nodejs&quot;&gt;Writing Hello World in Node.js&lt;/h3&gt;
&lt;p&gt;Node.js 용 Hello World 를 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;app.js 파일을 만들고 아래 코드를 작성합니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(&quot;Hello World!&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;터미널에서 app.js 파일이 있는 경로로 이동한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;node app.js&lt;/code&gt; 명령을 실행해 봅니다.&lt;/p&gt;

&lt;p&gt;짠, 이렇게 Hello World 프로그램을 Node.js 로 작성해 보았습니다.&lt;/p&gt;

&lt;p&gt;freeCodeCamp.org를 포함하여 Node.js 에 대하여 배울 수 있는 자료들은 엄청나게 많이 있습니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref.&lt;/h3&gt;
&lt;p&gt;이 글은 &lt;a href=&quot;https://medium.freecodecamp.org/what-exactly-is-node-js-ae36e97449f5&quot;&gt;What exactly is Node.js?&lt;/a&gt;를 번역한 글입니다. 글읽기에 어려움이 없도록 충분한 의역을 포함하였습니다.&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">Node.js는 자바스크립트 실행 환경입니다. 멋진 말입니다. 그런데 그것이 의미하는 바는 무엇이며 어떻게 동작이 된다는 말일까요?</summary></entry><entry><title type="html">postman 을 이용한 request 캡쳐</title><link href="http://localhost:4000/python/2018/04/postman.html" rel="alternate" type="text/html" title="postman 을 이용한 request 캡쳐" /><published>2018-04-20T23:00:00+09:00</published><updated>2018-04-20T23:00:00+09:00</updated><id>http://localhost:4000/python/2018/04/postman</id><content type="html" xml:base="http://localhost:4000/python/2018/04/postman.html">&lt;h4 id=&quot;모바일에서-http-request-캡쳐&quot;&gt;모바일에서 HTTP request 캡쳐&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/v6/postman/sending_api_requests/capturing_http_requests&quot;&gt;https://www.getpostman.com/docs/v6/postman/sending_api_requests/capturing_http_requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;postman의 proxy 를 사용&lt;/li&gt;
  &lt;li&gt;모바일 장비와 postman이 설치된 PC가 동일한 네트워크 망내 물려 있어야 함
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;크롬에서-http-request-캡쳐&quot;&gt;크롬에서 HTTP request 캡쳐&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/docs/v6/postman/sending_api_requests/interceptor_extension&quot;&gt;https://www.getpostman.com/docs/v6/postman/sending_api_requests/interceptor_extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;postman native app&lt;/em&gt; 으로는 안되고 &lt;em&gt;chrome postman app&lt;/em&gt; 을 이용해야 함&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;interceptor extension&lt;/em&gt; 과 &lt;em&gt;chrome postman app&lt;/em&gt; 양쪽 모두에서 &lt;em&gt;Request Capture&lt;/em&gt; 를 &lt;em&gt;on&lt;/em&gt; 설정&lt;/li&gt;
&lt;/ul&gt;</content><author><name>mg.song</name></author><summary type="html">모바일에서 HTTP request 캡쳐 https://www.getpostman.com/docs/v6/postman/sending_api_requests/capturing_http_requests postman의 proxy 를 사용 모바일 장비와 postman이 설치된 PC가 동일한 네트워크 망내 물려 있어야 함</summary></entry><entry><title type="html">[python] SimpleHTTPServer</title><link href="http://localhost:4000/python/2018/04/SimpleHTTPServer.html" rel="alternate" type="text/html" title="[python] SimpleHTTPServer" /><published>2018-04-20T13:00:00+09:00</published><updated>2018-04-20T13:00:00+09:00</updated><id>http://localhost:4000/python/2018/04/SimpleHTTPServer</id><content type="html" xml:base="http://localhost:4000/python/2018/04/SimpleHTTPServer.html">&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;p&gt;로컬에 서버가 설치되어 있지 않지만 간단하게(3초 안에) 웹서버를 띄우고 싶다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;python 이 설치되어 있다면,  &lt;em&gt;DOCUMENT_ROOT&lt;/em&gt; 경로에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ python -m SimpleHTTPServer&lt;/code&gt; 를 실행한다.&lt;/li&gt;
  &lt;li&gt;브라우져에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:8000&lt;/code&gt; 로 붙어 본다.
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ref&quot;&gt;Ref.&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/&quot; target=&quot;_blank&quot;&gt;http://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/&lt;/a&gt;&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">Problem 로컬에 서버가 설치되어 있지 않지만 간단하게(3초 안에) 웹서버를 띄우고 싶다</summary></entry><entry><title type="html">[js] getter와 setter 를 설정하는 방법</title><link href="http://localhost:4000/frontend/2018/04/getter-setter.html" rel="alternate" type="text/html" title="[js] getter와 setter 를 설정하는 방법" /><published>2018-04-19T10:00:00+09:00</published><updated>2018-04-19T10:00:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/getter-setter</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/getter-setter.html">&lt;p&gt;getter와 setter 를 이용하면 객체의 속성값을 읽고 쓰는 방법을 새롭게 정의할 수 있다
아래 코드를 먼저 보자&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 7&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; 객체는 아래 3가지 속성을 갖는다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o.a&lt;/code&gt; — 숫자값&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o.b&lt;/code&gt; — &lt;code class=&quot;highlighter-rouge&quot;&gt;o.a&lt;/code&gt; 에 1을 더한 값을 리턴하는 getter&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o.c&lt;/code&gt; — &lt;code class=&quot;highlighter-rouge&quot;&gt;o.a&lt;/code&gt; 에 할당된 값의 절반을 세팅하는 setter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;getter와 setter를 정의할 때  &lt;code class=&quot;highlighter-rouge&quot;&gt;[gs]et propertyName(){ ~~ }&lt;/code&gt; 문법을 사용하고 있음을 주목하기 바란다. 이 문법은 사람(사용자)에게는 혼돈스러움을 줄 수 있지만 기계(프로그램)적으로는 다른 문법요소(ex, 함수정의)와 구별하여 정확하게 getter와 setter 설정을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;아래 코드는 이미 생성된 객체에 getter 와 setter 를 설정하는 방법을 보여준다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행결과는 아래와 같다&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 987617605170&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Wed Apr 18 11:13:25 GMT-0700 (Pacific Daylight Time) 2001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원칙적으로 getter와 setter를 설정하는 방법은 아래 2가지 방법만 가능하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체리터럴을 이용해 객체를 생성할 때&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperties&lt;/code&gt; 를 이용한 동적 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 예와 같이 객체생성자를 이용할 때 당신이 해야할 일은 단지 속성명으로된 함수 정의 앞에 get 이나 set을 적어주는 것 뿐이다. 물론 getter 는 패러미터를 가지지 말아야 하며, setter는 정확히 단 한 개의 패러미터만 가질 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Object.defineProperties 를 이용하면 getter와 setter는 객체생성 이후 어느 시점에서든 추가될 수 있다. 첫번째 인자는 getter/setter 를 추가할 객체를, 두번째 인자로는 getter/setter를 추가할 속성명과 getter/setter 함수가 정의된 객체를 전달한다. 앞선 예제와 동일한 기능을 하는 아래 예시를 보자&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Runs the setter, which assigns 10 / 2 (5) to the 'a' property&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Runs the getter, which yields a + 1 or 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;당신은 당신의 코드스타일이나 처리할 문제 유형에 따라 위 둘 중 어느 형태든 선택을 할 수 있다. 객체의 prototype을 직접 정의하는 경우라면 대부분 첫번째 방법을 사용할 것이다. 이 방법은 훨씬 간결하고 자연스럽기 때문이다. 하지만 당신이 직접 객체의 prototype을 정의하는 경우가 아니라면 두번째 방법만이 유일한 선택지가 된다. 두번째 방법은 동적 언어로서의 자바스크립트 특성을 멋지게 잘 보여준다. 하지만 이런 방법은 코드의 가독성을 떨어뜨려 코드를 이해하기 어렵게 하는 요인이 될 수 있다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref.&lt;/h3&gt;
&lt;p&gt;이 글은 getter와 setter에 관한 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;MDN 기술문서의 일부&lt;/a&gt;를 번역한 글이다. 글읽기에 어려움이 없도록 충분한 의역을 포함하였다.&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">getter와 setter 를 이용하면 객체의 속성값을 읽고 쓰는 방법을 새롭게 정의할 수 있다 아래 코드를 먼저 보자 ```js var o = { a: 7, get b() { return this.a + 1; }, set c(x) { this.a = x / 2; } };</summary></entry><entry><title type="html">[mySQL] 테이블 수정 쿼리</title><link href="http://localhost:4000/frontend/2018/04/mysql-table.html" rel="alternate" type="text/html" title="[mySQL] 테이블 수정 쿼리" /><published>2018-04-16T11:00:00+09:00</published><updated>2018-04-16T11:00:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/mysql-table</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/mysql-table.html">&lt;h4 id=&quot;이름-바꾸기&quot;&gt;이름 바꾸기&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RENAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;컬럼-속성-수정&quot;&gt;컬럼 속성 수정&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MODIFY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colname&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;컬럼-이름-바꾸기&quot;&gt;컬럼 이름 바꾸기&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHANGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colname&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newcolname&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;CHANGE는 컬럼 속성뿐아니라 이름도 바꿔준다
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;컬럼-추가&quot;&gt;컬럼 추가&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ALTER TABLE tablename ADD 컬럼이름 컬럼속성&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;컬럼-삭제&quot;&gt;컬럼 삭제&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;특정-컬럼-뒤에-새로운-컬럼-추가&quot;&gt;특정 컬럼 뒤에 새로운 컬럼 추가&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newcol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AFTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;num 컬럼 뒤에 newcol 컬럼 추가
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기존-컬럼을-지우고-맨-앞에-컬럼-추가&quot;&gt;기존 컬럼을 지우고 맨 앞에 컬럼 추가&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newcol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newcol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FIRST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;맨 앞에 추가하려면 FIRST를 사용한다
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;primary-key-속성-삭제&quot;&gt;PRIMARY KEY 속성 삭제&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이미-primary-key인-컬럼의-속성을-바꿀-때&quot;&gt;이미 PRIMARY KEY인 컬럼의 속성을 바꿀 때&lt;/h4&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MODIFY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;PRIMARY KEY 속성은 지정하지 말고, NOT NULL 속성을 함께 지정해 주면 기존 PRIMARY KEY 속성은 그대로 남은 상태로 컬럼의 속성을 변경할 수 있다.
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ref&quot;&gt;Ref.&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://kwonnam.pe.kr/wiki/database/mysql/alter_table&quot;&gt;http://kwonnam.pe.kr/wiki/database/mysql/alter_table&lt;/a&gt;&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">이름 바꾸기 ALTER TABLE tablename RENAME bbs;</summary></entry><entry><title type="html">[windows] 특정 폴더에서 cmder 바로 열기</title><link href="http://localhost:4000/frontend/2018/04/windows-cmder.html" rel="alternate" type="text/html" title="[windows] 특정 폴더에서 cmder 바로 열기" /><published>2018-04-12T13:50:00+09:00</published><updated>2018-04-12T13:50:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/windows-cmder</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/windows-cmder.html">&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;윈도우에서 기본으로 제공되는 터미널은 Copy &amp;amp; Paste 및 창사이즈 조절에 제한이 있어 불편&lt;/li&gt;
  &lt;li&gt;터미널에서 cd 명령을 이용해 특정 경로로 이동하는 것도 귀찮고
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;잘 알려진 &lt;a href=&quot;http://cmder.net&quot;&gt;윈도우용 터미널 cmder&lt;/a&gt; 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\cmder_mini&lt;/code&gt; 경로에 설치한다.&lt;br /&gt;
(설치 경로를 변경하고자 한다면 아래 레지스트리 편집기에서 경로를 알맞게 수정)
&lt;img src=&quot;/images/addCmder0.png&quot; alt=&quot;img0&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;아래와 같이 레지스트리 편집
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Windows Registry Editor Version 5.00

 [HKEY_CLASSES_ROOT\Directory\Background\shell\Open Command Window Here]
 @=&quot;Open commend window here(&amp;amp;Z)&quot;

 [HKEY_CLASSES_ROOT\Directory\Background\shell\Open Command Window Here\command]
 @=&quot;C:\\cmder_mini\\cmder.exe %v&quot;

 [HKEY_CLASSES_ROOT\Directory\shell\Open Command Window Here]
 @=&quot;Open commend window here(&amp;amp;Z)&quot;

 [HKEY_CLASSES_ROOT\Directory\shell\Open Command Window Here\command]
 @=&quot;C:\\cmder_mini\\cmder.exe %v&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;직접 수정하기가 귀찮다면 아래 레지스트리 편집 파일을 간단히 사용해도 된다&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/files/AddCmder.reg&quot;&gt;AddCmder.reg&lt;/a&gt; (위 내용과 동일)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/files/DelCmder.reg&quot;&gt;DelCmder.reg&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/files/AddCmderAdmin.reg&quot;&gt;AddCmderAdmin.reg&lt;/a&gt; (관리자권한 실행)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/files/DelCmderAdmin.reg&quot;&gt;DelCmderAdmin.reg&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특정 경로에서 마우스 오른 클릭을 하면 바로가기 가능!
&lt;img src=&quot;/images/addCmder1.png&quot; alt=&quot;img1&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/addCmder2.png&quot; alt=&quot;img2&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://minq.tistory.com/667&quot; target=&quot;_blank&quot;&gt;http://minq.tistory.com/667&lt;/a&gt;&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">Problem 윈도우에서 기본으로 제공되는 터미널은 Copy &amp;amp; Paste 및 창사이즈 조절에 제한이 있어 불편 터미널에서 cd 명령을 이용해 특정 경로로 이동하는 것도 귀찮고</summary></entry><entry><title type="html">[mac] High Sierra 에서 telnet &amp;amp; ftp CLI 설치</title><link href="http://localhost:4000/frontend/2018/04/install-ftp.html" rel="alternate" type="text/html" title="[mac] High Sierra 에서 telnet &amp; ftp CLI 설치" /><published>2018-04-11T14:40:00+09:00</published><updated>2018-04-11T14:40:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/install-ftp</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/install-ftp.html">&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;
&lt;p&gt;Mac High Sierra 는 보안 상의 문제로 터미널에서 telnet, ftp 명령어를 기본적으로 지원하지 않는다
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;아래와 같이 CLI도구를 따로 설치해야 한다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;다운로드
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl http://ftp.gnu.org/gnu/inetutils/inetutils-1.9.4.tar.gz &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; inetutils-1.9.4.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컴파일
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvzf inetutils-1.9.4.tar.gz
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;inetutils-1.9.4
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./configure
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;설치
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;추가로 설치되는 항목들은 아래와 같다(/usr/local/bin)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
ping6
ping
whois
talk
ftp
telnet
traceroute
tftp
rsh
rlogin
rexec
rcp
logger
dnsdomainname
hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.unixfu.ch/get-telnet-and-ftp-client-back-on-macos-high-sierra/&quot;&gt;http://www.unixfu.ch/get-telnet-and-ftp-client-back-on-macos-high-sierra/&lt;/a&gt;&lt;/p&gt;</content><author><name>mg.song</name></author><summary type="html">Problem Mac High Sierra 는 보안 상의 문제로 터미널에서 telnet, ftp 명령어를 기본적으로 지원하지 않는다</summary></entry><entry><title type="html">[js] boolean 결과 값이 false 인 값들</title><link href="http://localhost:4000/frontend/2018/04/js-boolean.html" rel="alternate" type="text/html" title="[js] boolean 결과 값이 false 인 값들" /><published>2018-04-09T14:00:00+09:00</published><updated>2018-04-09T14:00:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/js-boolean</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/js-boolean.html">&lt;h4 id=&quot;조건문에서-boolean-값으로-형변환-시&quot;&gt;조건문에서 boolean 값으로 형변환 시,&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;false를 리턴하는 값들
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;true를 리턴하는 것
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//위 1번외 모든 값&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// !!Infinity 도 true 리턴&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>mg.song</name></author><summary type="html">조건문에서 boolean 값으로 형변환 시,</summary></entry><entry><title type="html">크롬 개발자도구를 이용한 js beautify</title><link href="http://localhost:4000/frontend/2018/04/chrome-beautify.html" rel="alternate" type="text/html" title="크롬 개발자도구를 이용한 js beautify" /><published>2018-04-02T23:25:00+09:00</published><updated>2018-04-02T23:25:00+09:00</updated><id>http://localhost:4000/frontend/2018/04/chrome-beautify</id><content type="html" xml:base="http://localhost:4000/frontend/2018/04/chrome-beautify.html">&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;난독화된 js를 디버깅해야 할 경우 크롬 개발자도구의 beautify 기능을 간단히 이용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;특별히 오프라인 환경에서 beautify 도구를 사용할 수 없을 때 유용함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;난독화된 $.clone 함수를 예로 해당 함수를 beautify 하는 방법을 소개
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;benefits-to&quot;&gt;Benefits to&lt;/h4&gt;
&lt;p&gt;보안 상의 이유로 폐쇄 망에 갇혀 프로젝트를 진행해야 하는 서글픈 SI개발자
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;guide&quot;&gt;Guide&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;개발자도구 console탭을 이용해 toString 을 이용해 디버깅할 함수 정의를 확인한다
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;clone.toString&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt; &quot;function (a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;k.html5Clone||m.isXMLDoc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)||!&lt;/span&gt;gb.test&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;+a.nodeName+&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?f&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a.cloneNode&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tb.innerHTML&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a.outerHTML,tb.removeChild&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tb.firstChild&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,!&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;k.noCloneEvent&amp;amp;&amp;amp;k.noCloneChecked||1!&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;a.nodeType&amp;amp;&amp;amp;11!&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;a.nodeType||m.isXMLDoc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;null!&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;++g&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;d[g]&amp;amp;&amp;amp;Bb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e,d[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h||ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,d&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;d||ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;null!&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;g++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Ab&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e,d[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;Ab&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f,&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,d.length&amp;gt;0&amp;amp;&amp;amp;zb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;d,!i&amp;amp;&amp;amp;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,d&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;null,f&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위 함수 정의를 복사하여 아래와 같이 변수에 할당한다.&lt;br /&gt;
(이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;var tmp = $.clone;&lt;/code&gt; 와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;$.clone&lt;/code&gt; 함수를 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt; 변수에 담을 경우 함수의 복사본이 아닌 참조가 &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt;에 할당되며 이후 아래 3번 과정에서 난독화된 js전체 소스를 한꺼번에 beautify 해야하는 부담이 발생할 수 있다)
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt; var tmp &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,b,c&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;var d,e,f,g,h,i&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;m.contains&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a.ownerDocument,a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;k.html5Clone||m.isXMLDoc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)||!&lt;/span&gt;gb.test&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;+a.nodeName+&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?f&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a.cloneNode&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tb.innerHTML&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a.outerHTML,tb.removeChild&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tb.firstChild&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,!&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;k.noCloneEvent&amp;amp;&amp;amp;k.noCloneChecked||1!&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;a.nodeType&amp;amp;&amp;amp;11!&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;a.nodeType||m.isXMLDoc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,h&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;null!&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;++g&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;d[g]&amp;amp;&amp;amp;Bb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e,d[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h||ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,d&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;d||ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;null!&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;g++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;Ab&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e,d[g]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;Ab&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f,&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,d.length&amp;gt;0&amp;amp;&amp;amp;zb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;d,!i&amp;amp;&amp;amp;ub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,d&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;null,f&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt; undefined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debugger; tmp();&lt;/code&gt; 를 실행하고, tmp 함수내로 진입한 후
&lt;img src=&quot;/images/chrome-step1.PNG&quot; alt=&quot;step1&quot; /&gt;
&lt;br /&gt;
왼쪽 아래 {} 버튼을 클릭하면
&lt;br /&gt;
&lt;img src=&quot;/images/chrome-step2.PNG&quot; alt=&quot;step2&quot; /&gt;
&lt;br /&gt;beautify 됨
&lt;br /&gt;
&lt;img src=&quot;/images/chrome-step3.PNG&quot; alt=&quot;step3&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>mg.song</name></author><summary type="html">Summary 난독화된 js를 디버깅해야 할 경우 크롬 개발자도구의 beautify 기능을 간단히 이용할 수 있다. 특별히 오프라인 환경에서 beautify 도구를 사용할 수 없을 때 유용함 난독화된 $.clone 함수를 예로 해당 함수를 beautify 하는 방법을 소개</summary></entry></feed>